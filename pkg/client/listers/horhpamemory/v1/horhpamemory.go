/*
Copyright 2018 The Openshift Evangelists

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1 "kube-hpamemory/pkg/apis/horhpamemory/v1"
)

// HORHPAMemoryLister helps list HORHPAMemories.
type HORHPAMemoryLister interface {
	// List lists all HORHPAMemories in the indexer.
	List(selector labels.Selector) (ret []*v1.HORHPAMemory, err error)
	// HORHPAMemories returns an object that can list and get HORHPAMemories.
	HORHPAMemories(namespace string) HORHPAMemoryNamespaceLister
	HORHPAMemoryListerExpansion
}

// hORHPAMemoryLister implements the HORHPAMemoryLister interface.
type hORHPAMemoryLister struct {
	indexer cache.Indexer
}

// NewHORHPAMemoryLister returns a new HORHPAMemoryLister.
func NewHORHPAMemoryLister(indexer cache.Indexer) HORHPAMemoryLister {
	return &hORHPAMemoryLister{indexer: indexer}
}

// List lists all HORHPAMemories in the indexer.
func (s *hORHPAMemoryLister) List(selector labels.Selector) (ret []*v1.HORHPAMemory, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.HORHPAMemory))
	})
	return ret, err
}

// HORHPAMemories returns an object that can list and get HORHPAMemories.
func (s *hORHPAMemoryLister) HORHPAMemories(namespace string) HORHPAMemoryNamespaceLister {
	return hORHPAMemoryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HORHPAMemoryNamespaceLister helps list and get HORHPAMemories.
type HORHPAMemoryNamespaceLister interface {
	// List lists all HORHPAMemories in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.HORHPAMemory, err error)
	// Get retrieves the HORHPAMemory from the indexer for a given namespace and name.
	Get(name string) (*v1.HORHPAMemory, error)
	HORHPAMemoryNamespaceListerExpansion
}

// hORHPAMemoryNamespaceLister implements the HORHPAMemoryNamespaceLister
// interface.
type hORHPAMemoryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HORHPAMemories in the indexer for a given namespace.
func (s hORHPAMemoryNamespaceLister) List(selector labels.Selector) (ret []*v1.HORHPAMemory, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.HORHPAMemory))
	})
	return ret, err
}

// Get retrieves the HORHPAMemory from the indexer for a given namespace and name.
func (s hORHPAMemoryNamespaceLister) Get(name string) (*v1.HORHPAMemory, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("horhpamemory"), name)
	}
	return obj.(*v1.HORHPAMemory), nil
}
